kind: secret
name: registry
get:
  path: secret/data/registry
  name: registry
---
kind: secret
name: username
get:
  path: secret/data/registry
  name: username

---
kind: secret
name: password
get:
  path: secret/data/registry
  name: password
---
kind: secret
name: repo
get:
  path: secret/data/standartization-repository
  name: repo
---
kind: secret
name: develop_url
get:
  path: secret/data/k8s-skeleton
  name: develop_url
---
kind: secret
name: develop_token
get:
  path: secret/data/k8s-skeleton
  name: develop_token
---
kind: secret
name: develop_ca
get:
  path: secret/data/k8s-skeleton
  name: develop_ca
---
kind: secret
name: staging_url
get:
  path: secret/data/k8s-skeleton
  name: staging_url
---
kind: secret
name: staging_token
get:
  path: secret/data/k8s-skeleton
  name: staging_token
---
kind: secret
name: staging_ca
get:
  path: secret/data/k8s-skeleton
  name: staging_ca
---
kind: secret
name: standatization
get:
  path: secret/data/notifications-skeleton
  name: standatization
---
kind: secret
name: notify_username
get:
  path: secret/data/notifications-skeleton
  name: username
---
kind: secret
name: notify_icon
get:
  path: secret/data/notifications-skeleton
  name: icon_url
---
kind: pipeline
type: docker
name: skeleton
globals:
- &confNoSaveBuild
  dockerfile: Dockerfile
  repo: plugins/docker
  tag: skeleton-tag
  dry_run: true
  daemon_off: false

- &confSaveBuild
  dockerfile: Dockerfile
  registry:
    from_secret: registry
  repo:
    from_secret: repo
  tag: ${DRONE_BRANCH}
  auto_tag: true
  username:
    from_secret: username
  password:
    from_secret: password

- &stepCheckBuild
  name: build test
  image: plugins/docker
  settings:
    <<: *confNoSaveBuild

- &stepMainBuild
  name: build
  image: plugins/docker
  settings:
    <<: *confSaveBuild

- &stepDevelopDeploy
  name: deploy develop
  image: sinlead/drone-kubectl
  settings:
    kubernetes_server:
      from_secret: develop_url
    kubernetes_token:
      from_secret: develop_token
    kubernetes_cert:
      from_secret: develop_ca
  environment:
    CICD_GIT_COMMIT: ${DRONE_COMMIT}
    CICD_GIT_BRANCH: ${DRONE_BRANCH}
  commands:
  - sed -i "s/\$CICD_GIT_BRANCH/$CICD_GIT_BRANCH/g" deploy/*
  - sed -i "s/\$CICD_GIT_COMMIT/$CICD_GIT_COMMIT/g" deploy/*
  - kubectl apply -f deploy/ -n skeleton-project

- &stepStagingDeploy
  name: deploy staging
  image: sinlead/drone-kubectl
  settings:
    kubernetes_server:
      from_secret: staging_url
    kubernetes_token: 
      from_secret: staging_token
    kubernetes_cert: 
      from_secret: staging_ca
  environment:
    CICD_GIT_COMMIT: ${DRONE_COMMIT}
    CICD_GIT_BRANCH: ${DRONE_BRANCH}
  commands:
  - sed -i "s/\$CICD_GIT_BRANCH/$CICD_GIT_BRANCH/g" deploy/*
  - sed -i "s/\$CICD_GIT_COMMIT/$CICD_GIT_COMMIT/g" deploy/*
  - kubectl apply -f deploy/ -n staging-skeleton-project

- &stepNotifyToSlack
  name: notify-to-slack
  image: plugins/slack
  pull: always
  settings:
    webhook:
      from_secret: standatization
    channel: standatization
    username: 
      from_secret: notify_username
    icon_url:
      from_secret: notify_icon
    template: >
      {{#success build.status}}
       *Event*: `{{build.event}}` {{build.status}}
       *Repository*: `{{repo.name}}` to `{{build.branch}}`
       *Commit*: `{{build.commit}}`
       *Info*: {{build.number}} build was executed for {{since build.started}}
      <{{build.link}}|*Build link*>
      {{else}}
       *Event*: `{{build.event}}` {{build.status}}
       *Repository*: `{{repo.name}}` to `{{build.branch}}`
       *Commit*: `{{build.commit}}`
       *Info*: {{build.number}} build was executed for {{since build.started}}
      <{{build.link}}|*Build link*>
      {{/success}}

steps:
- <<: *stepCheckBuild
  when:
    ref: [ refs/heads/feature/*, refs/heads/hotfix/*]

- <<: *stepMainBuild
  when:
    ref: [ refs/heads/develop, refs/heads/staging, refs/heads/master, refs/tags/* ]

- <<: *stepDevelopDeploy
  when:
    ref: [ refs/heads/develop ]

- <<: *stepStagingDeploy
  when:
    ref: [ refs/heads/staging ]

- <<: *stepNotifyToSlack
  when:
    status: [ success, failure ]
    ref: [ refs/heads/develop, refs/heads/staging, refs/heads/master, refs/tags/* ]

trigger:
  ref:
    - refs/heads/feature/*
    - refs/heads/hotfix/*
    - refs/heads/develop
    - refs/heads/staging
    - refs/tags/*
