kind: secret
name: registry
get:
  path: secret/data/skeleton-registry
  name: registry
---
kind: secret
name: username
get:
  path: secret/data/skeleton-registry
  name: username

---
kind: secret
name: password
get:
  path: secret/data/skeleton-registry
  name: password
---
kind: secret
name: repoitory
get:
  path: secret/data/skeleton-repository
  name: repository
---
kind: secret
name: develop_url
get:
  path: secret/data/k8s-skeleton
  name: develop_url
---
kind: secret
name: develop_token
get:
  path: secret/data/k8s-skeleton
  name: develop_token
---
kind: secret
name: develop_ca
get:
  path: secret/data/k8s-skeleton
  name: develop_ca
---
kind: secret
name: staging_url
get:
  path: secret/data/k8s-skeleton
  name: staging_url
---
kind: secret
name: staging_token
get:
  path: secret/data/k8s-skeleton
  name: staging_token
---
kind: secret
name: staging_ca
get:
  path: secret/data/k8s-skeleton
  name: staging_ca
---
kind: secret
name: standatization
get:
  path: secret/data/notifications-skeleton
  name: standatization
---
kind: secret
name: notify_username
get:
  path: secret/data/notifications-skeleton
  name: username
---
kind: secret
name: notify_icon
get:
  path: secret/data/notifications-skeleton
  name: icon_url
---
kind: secret
name: secure_trivy
get:
  path: secret/data/skeleton-security
  name: secure_trivy_url
---
name: 4xxi build skeleton
type: docker
kind: pipeline

volumes:
- name: dockersock
  host: 
    path: /var/run/docker.sock

globals:
- &confNoSaveBuild
  dockerfile: Dockerfile
  repo: plugins/docker
  tag: skeleton-tag
  dry_run: true
  daemon_off: false

- &confSaveBuild
  dockerfile: Dockerfile
  registry:
    from_secret: registry
  repo:
    from_secret: repo
  tag: ${DRONE_BRANCH}
  username:
    from_secret: username
  password:
    from_secret: password
  volumes:
  - name: dockersock
    path: /var/run/docker.sock

- &stepCheckBuild
  image: plugins/docker
  settings:
    <<: *confNoSaveBuild

- &stepMainBuild
  image: plugins/docker
  settings:
    <<: *confSaveBuild

- &stepDevelopDeploy
  image: sinlead/drone-kubectl
  settings:
    kubernetes_server:
      from_secret: develop_url
    kubernetes_token:
      from_secret: develop_token
    kubernetes_cert:
      from_secret: develop_ca
  environment:
    CICD_GIT_COMMIT: ${DRONE_COMMIT}
    CICD_GIT_BRANCH: ${DRONE_BRANCH}
  commands:
  - sed -i "s/\$CICD_GIT_BRANCH/$CICD_GIT_BRANCH/g" deploy/*
  - sed -i "s/\$CICD_GIT_COMMIT/$CICD_GIT_COMMIT/g" deploy/*
  - kubectl apply -f deploy/ -n skeleton-project

- &stepStagingDeploy
  image: sinlead/drone-kubectl
  settings:
    kubernetes_server:
      from_secret: staging_url
    kubernetes_token: 
      from_secret: staging_token
    kubernetes_cert: 
      from_secret: staging_ca
  environment:
    CICD_GIT_COMMIT: ${DRONE_COMMIT}
    CICD_GIT_BRANCH: ${DRONE_BRANCH}
  commands:
  - sed -i "s/\$CICD_GIT_BRANCH/$CICD_GIT_BRANCH/g" deploy/*
  - sed -i "s/\$CICD_GIT_COMMIT/$CICD_GIT_COMMIT/g" deploy/*
  - kubectl apply -f deploy/ -n staging-skeleton-project

- &stepNotifyToSlack
  image: plugins/slack
  pull: always
  settings:
    webhook:
      from_secret: standatization
    channel: standatization
    username: 
      from_secret: notify_username
    icon_url:
      from_secret: notify_icon
    template: >
      {{#success build.status}}
       *Event*: `{{build.event}}` {{build.status}}
       *Repository*: `{{repo.name}}` to `{{build.branch}}`
       *Commit*: `{{build.commit}}`
       *Info*: {{build.number}} build was executed for {{since build.started}}
      <{{build.link}}|*Build link*>
      {{else}}
       *Event*: `{{build.event}}` {{build.status}}
       *Repository*: `{{repo.name}}` to `{{build.branch}}`
       *Commit*: `{{build.commit}}`
       *Info*: {{build.number}} build was executed for {{since build.started}}
      <{{build.link}}|*Build link*>
      {{/success}}

steps:
- name: build (no save)
  <<: *stepCheckBuild
  when:
    branch: [ feature/* ]

- name: build
  <<: *stepMainBuild
  when:
    branch: [ develop, staging, master ]

- name: deploy develop
  <<: *stepDevelopDeploy
  when:
    branch: [ develop ]

- name: deploy staging
  <<: *stepStagingDeploy
  when:
    branch: [ staging ]

- name: notify-to-slack
  <<: *stepNotifyToSlack
  when:
    status: [ success, failure ]
    branch: [ feature/*, staging, develop, master ]

trigger:
  branch: [ feature/*, staging, develop, master  ]
---
name: 4xxi secure skeleton
type: docker
kind: pipeline
depends_on: [ "4xxi build skeleton" ]

clone:
  disable: true
  
volumes:
- name: dockersock
  host: 
    path: /var/run/docker.sock
    
services:
- name: skeleton_target
  image: 
    from_secret: repository

globals:
- &stepSecurityTrivy
  image: aquasec/trivy
  pull: if-not-exists
  environment:
    URL_TRIVY:
      from_secret: secure_trivy
    REPOSITORY:
      from_secret: repository
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - trivy client --remote $URL_TRIVY --ignore-unfixed --severity HIGH,CRITICAL  $REPOSITORY:latest

- &stepSecurityNmap
  image: securecodebox/nmap 
  pull: if-not-exists
  commands: 
  - sleep 30 && nmap skeleton_target
  
- &stepSecurityZaproxy
  image: owasp/zap2docker-stable
  pull: if-not-exists
  commands:
  - cd ~ && sleep 30 && zap-baseline.py -I -t http://skeleton_target -m 2
  
steps:
- name: Security trivy
  <<: *stepSecurityTrivy
  when:
    branch: [ staging, develop, master ]
    
- name: Security nmap
  <<: *stepSecurityNmap
  when:
    branch: [ staging, develop, master ]

- name: Securuty zaproxy
  <<: *stepSecurityZaproxy
  when:
    branch: [ staging, develop, master ]
  
trigger:
  branch: [ staging, develop, master ]
